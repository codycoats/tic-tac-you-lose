{"version":3,"sources":["components/Board/Board.js","components/App/App.js","index.js"],"names":["BOT_VALUE","CORNERS","SIDES","WINNING_BOARDS","INTIAL_BOARD","Array","BOARD_SIZE","boardReducer","state","action","type","Number","isNaN","newBotMove","botMoves","userMoves","newState","map","cell","index","result","push","stateWithBot","length","i","winningBoard","forEach","value","moveInBoard","indexOf","splice","undefined","CORNER_OPPOSITES","0","2","6","8","corner","console","log","INDEX_LABEL_MAPPING","1","3","4","5","7","Board","useReducer","apply","boardState","dispatch","handleReset","e","preventDefault","winner","board","found","find","reduce","prev","current","Boolean","hasBotWon","draw","hasUserPlayed","className","onSubmit","target","parseInt","id","key","name","disabled","htmlFor","role","aria-label","onClick","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.5d785792.chunk.js","sourcesContent":["import React, { useReducer } from 'react';\n\nconst RADIO_GROUP_NAME = 'board' \nconst BOARD_SIZE = 3;\n\nconst BOT_VALUE = -1;\nconst PLAYER_VALUE = 1;\n\nconst CENTER = 4;\nconst CORNERS = [0, 2, 6, 8];\nconst SIDES = [1, 3, 5, 7];\nconst WINNING_BOARDS = [\n  [0,1,2],\n  [3,4,5],\n  [6,7,8],\n  [0,4,8],\n  [2,4,6],\n  [0,3,6],\n  [1,4,7],\n  [2,5,8]\n];\n\n// We start the intial board with the bot playing in top-left corner\n// This could be randomized to be seem more \"fair\"\nconst INTIAL_BOARD = [BOT_VALUE, ...Array((BOARD_SIZE* BOARD_SIZE) - 1)];\n\nconst BOARD_REDUCER_ACTION_RESET = 'reset';\n\nconst boardReducer = (state, action) => {\n  const type = action.type;\n\n  if(type === BOARD_REDUCER_ACTION_RESET) {\n    return [...INTIAL_BOARD];\n  }\n\n  if(Number.isNaN(type)) {\n    return state;\n  }\n\n  // Add user's move\n  const botMoves = [];\n  const userMoves = [];\n  const newState = state.map((cell, index) => {\n    let result = cell;\n\n    if(index === type) {\n      result = PLAYER_VALUE;\n      userMoves.push(index)\n    } else if(cell === BOT_VALUE ) {\n      botMoves.push(index);\n    } else if ( cell === PLAYER_VALUE ) {\n      userMoves.push(index)\n    }\n\n    return result;\n  });\n\n  // Add bot's move according to Newell & Simon's strategy https://en.wikipedia.org/wiki/Tic-tac-toe#Strategy\n  const stateWithBot = [...newState];\n  let newBotMove;\n\n  // Check if there a potential win\n  if(botMoves.length >= 2 && !newBotMove) {\n    for(let i = 0; i < WINNING_BOARDS.length; i++) {\n      const winningBoard = [...WINNING_BOARDS[i]];\n  \n      botMoves.forEach((value) => {\n        const moveInBoard = winningBoard.indexOf(value);\n  \n        if(moveInBoard !== -1) {\n          winningBoard.splice(moveInBoard, 1);\n        }\n      })\n      \n      if(winningBoard.length === 1 && stateWithBot[winningBoard[0]] === undefined) {\n        newBotMove = winningBoard[0];\n        break;\n      }\n    }\n  } \n\n  // Block user from winning\n  if(userMoves.length >= 2) {\n    for(let i = 0; i < WINNING_BOARDS.length; i++) {\n      const winningBoard = [...WINNING_BOARDS[i]];\n  \n      userMoves.forEach((value) => {\n        const moveInBoard = winningBoard.indexOf(value);\n  \n        if(moveInBoard !== -1) {\n          winningBoard.splice(moveInBoard, 1);\n        }\n      })\n      \n      if(winningBoard.length === 1 && stateWithBot[winningBoard[0]] === undefined) {\n        newBotMove = winningBoard[0];\n        break;\n      }\n    }\n  }\n\n  // Is the center available?\n  if(!newBotMove && stateWithBot[CENTER] === undefined) {\n    newBotMove = CENTER;\n  }\n\n  // Pick an opposite corner \n  if(!newBotMove) {\n    const CORNER_OPPOSITES = {\n      0: 8,\n      2: 6,\n      6: 2,\n      8: 0\n    };\n\n    for(let i=0; i < CORNERS.length; i++) {\n      let corner = stateWithBot[CORNERS[i]];\n      if(corner === PLAYER_VALUE) {\n        newBotMove = CORNER_OPPOSITES[corner];\n        break;\n      }\n    }\n  }\n  \n  // Otherwise pick an empty corner\n  if(!newBotMove) {\n    for(let i = 0; i < CORNERS.length; i++) {\n      let corner = stateWithBot[CORNERS[i]];\n\n      if(corner === undefined) {\n        newBotMove = CORNERS[i];\n        break;\n      }\n    }\n  }\n\n  // Lastly pick an empty side\n  if(!newBotMove) {\n    for(let i = 0; i < SIDES.length; i++) {\n      let side = stateWithBot[SIDES[i]];\n\n      if(side === undefined) {\n        newBotMove = SIDES[i];\n        break;\n      }\n    }\n  }\n\n  if(!newBotMove) {\n    console.log(\"still haven't found a bot move\")\n  }\n\n  stateWithBot[newBotMove] = BOT_VALUE;\n\n  return stateWithBot;\n}\n\nconst hasBotWon = (board) => {\n  const found = WINNING_BOARDS.find((winner) => {\n    return winner.reduce((prev, current, index) => {\n      return prev && board[current] === BOT_VALUE;\n    }, true)\n  });\n\n  return Boolean(found);\n}\n\nconst INDEX_LABEL_MAPPING = {\n  0: 'Top left',\n  1: 'Top middle',\n  2: 'Top right',\n  3: 'Middle left',\n  4: 'Center',\n  5: 'Middle right',\n  6: 'Bottom left',\n  7: 'Bottom middle',\n  8: 'Bottom right'\n}\n\nconst Board = () => {\n  const [boardState, dispatch] = useReducer(boardReducer, Array.apply(undefined, [...INTIAL_BOARD]));\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    const { value } = e.target[RADIO_GROUP_NAME];\n    dispatch({type: parseInt(value, 10)}) \n  }\n  const handleReset = (e) => {\n    e.preventDefault();\n    dispatch({type: BOARD_REDUCER_ACTION_RESET})\n  }\n\n  const winner = hasBotWon(boardState);\n  const draw = !winner && boardState.indexOf(undefined) === -1;\n\n  const hasUserPlayed = boardState.indexOf(PLAYER_VALUE) !== -1;\n\n  return (\n    <>\n    {winner && <em>You lose, told you!</em>}\n    {!hasUserPlayed && <em>You‘re go.</em>}\n    {draw && <em>Fine, well at least I didn't lose.</em>}\n    <form className=\"board\" onSubmit={handleSubmit}>\n\n      {boardState.map((cell, index) => {\n        const id = `cell-${index}`;\n        let cellMarkup;\n\n        if(cell === PLAYER_VALUE) {\n          cellMarkup = (\n            <div className=\"board__cell board__cell--filled\" key={index}>\n              <input className=\"board__cell-control\" type=\"radio\" id={id} name={RADIO_GROUP_NAME} value={index} disabled />\n              <label className=\"board__cell-label\" htmlFor={id}>\n                <span className=\"sr-only\">{INDEX_LABEL_MAPPING[index]}</span>\n                <span role=\"img\" aria-label=\"O\">⭕️</span>\n              </label>\n            </div>\n          );\n        } else if( cell === BOT_VALUE) {\n          cellMarkup = (\n            <div className=\"board__cell board__cell--filled\" key={index}>\n              <input className=\"board__cell-control\" type=\"radio\" id={id} name={RADIO_GROUP_NAME} value={index} disabled />\n              <label className=\"board__cell-label\" htmlFor={id}>\n                <span className=\"sr-only\">{INDEX_LABEL_MAPPING[index]}</span>\n                <span role=\"img\" aria-label=\"X\">❌</span>\n              </label>\n            </div>\n          );\n        } else {\n          cellMarkup = (\n            <div className=\"board__cell\" key={index}>\n              <input className=\"board__cell-control\" type=\"radio\" id={id} name={RADIO_GROUP_NAME} value={index}/>\n              <label className=\"board__cell-label\" htmlFor={id}>\n                <span className=\"sr-only\">{INDEX_LABEL_MAPPING[index]}</span>\n              </label>\n            </div>\n          );\n        }\n\n        return cellMarkup;\n      })}\n\n      <div className=\"board__actions\">\n        {(winner || draw) ? \n          <button className=\"action board__action\" onClick={handleReset} type=\"reset\">Lose again</button> :\n          (\n            <>\n              {hasUserPlayed && <button className=\"action board__action\" onClick={handleReset} type=\"reset\">Give up!</button>}\n              <button className=\"action board__action\" type=\"submit\">Submit</button> \n            </>\n          )\n        }\n      </div>\n    </form>\n    </>\n  )\n}\n\nexport default Board;","import React from 'react';\nimport Board from '../Board/Board';\n\nfunction App() {\n  return (\n    <main className=\"app\">\n      <h1>Tic-Tac You Lose!</h1>\n      <Board />\n    </main>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.scss';\nimport App from './components/App/App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}